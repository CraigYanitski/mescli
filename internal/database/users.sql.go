// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, 
    created_at, 
    updated_at, 
    email, 
    name,
    hashed_password, 
    initialised
) VALUES (
    gen_random_uuid(), 
    NOW(), 
    NOW(),
    $1,
    $2,
    $3,
    false
) RETURNING id, created_at, updated_at, email, name, hashed_password, initialised
`

type CreateUserParams struct {
	Email          string
	Name           string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Name, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.Initialised,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, name, hashed_password, initialised FROM users 
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.Initialised,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, name, hashed_password, initialised FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.Initialised,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET updated_at = NOW(),
    email = $2,
    name = $3,
    hashed_password = $4,
    initialised = $5
WHERE id = $1
RETURNING id, created_at, updated_at, email, name, hashed_password, initialised
`

type UpdateUserParams struct {
	ID             uuid.UUID
	Email          string
	Name           string
	HashedPassword string
	Initialised    bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.HashedPassword,
		arg.Initialised,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.Initialised,
	)
	return i, err
}
